# Django Girls - Django Tutorial Notes

# Create a directory where we will store our project
mkdir blogs

# Creating a virtual environment
python3.12 -m venv myvenv

# Upgrading pip
python3 -m pip install --upgrade pip

# Create a requirements.txt file
Django~=5.0.1

# Installing Django through our requirements.txt file
pip install -r requirements.txt

# Creating a Django project in the same directory
django-admin startproject mysite .

# Setting time zone in settings.py
TIME_ZONE = 'Asia/Manila'

# Setting the STATIC_ROOT
STATIC_ROOT = BASE_DIR / 'static'

# Setting ALLOWED_HOSTS
ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']

# Creating a database for our project
python3 manage.py migrate

# Starting our web server
python3 manage.py runserver
python3 manage.py runserver 8001 # run at a specific port

# Creating an app
python3 manage.py startapp blog # remember to add to INSTALLED_APPS in settings.py

# Creating tables for our models in our database and adding them to our database
python3 manage.py makemigrations blog
python3 manage.py migrate

# Making admin have control over our Post models
admin.site.register(Post)  # inside admin.py file

# Creating a superuser
python3 manage.py createsuperuser

# Looking at our Post objects using the python shell
source myvenv/bin/activate
python3 manage.py shell
from blog.models import Post
Post.objects.all()

# Looking at our existing users in our database
from django.contrib.auth.models import User
User.objects.all()

# Creating a Post object in our shell console
me=User.objects.get(username='rein')
Post.objects.create(author=me, title='Sample title', text='Test')

# Filtering Post objects
Post.objects.filter(author=me)
Post.objects.filter(title__contains='title')  # returns Post objects with a title of 'title'

from django.utils import timezone
Post.objects.filter(published_date__lte=timezone.now())  # returns Post objects with a published date

# Publishing a Post object through the python shell
post = Post.objects.get(title='Sample title')
post.publish()
Post.objects.filter(published_date__lte=timezone.now())  # check if the Post objects with published_date increased

# Ordering objects
Post.objects.order_by('created_date')  # first created to lastest created
Post.objects.order_by('-created_date')  # last created to first created

# Getting Post objects that have been published and order them by their publish_date
Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
exit()  # exit shell

# Installing PostgreSQL
sudo apt-get install postgresql postgresql-contrib

# Creating the database
sudo -u postgres psql

# Creating a user
CREATE USER name (name being interchangeable to our name)

CREATE USER rein;
CREATE DATABASE mysite OWNER rein;

# Installing psycopg2 so that our PostgreSQL Database could connect with Python
source myvenv/bin/activate
sudo apt-get install libpq-dev python3-dev
pip install psycopg2
python3 -c "import psychopg2"
